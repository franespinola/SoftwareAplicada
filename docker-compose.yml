version: '3.8'
name: task

services:
  # Aplicación principal
  # Un compose es una forma de definir y ejecutar aplicaciones Docker multi-contenedor.
  # Es decir que me permite definir varios servicios que se ejecutan en contenedores separados, pero que pueden interactuar entre sí.
  app:
    image: task:latest
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - _JAVA_OPTIONS=-Xmx512m -Xms256m
      - SPRING_PROFILES_ACTIVE=prod,api-docs
      - MANAGEMENT_PROMETHEUS_METRICS_EXPORT_ENABLED=true
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/task?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&createDatabaseIfNotExist=true
      - SPRING_LIQUIBASE_URL=jdbc:mysql://mysql:3306/task?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&createDatabaseIfNotExist=true
      # Configuración para logstash (ELK stack activado)
      - LOGGING_CONFIG=classpath:logback-spring-elk.xml
      - LOGSTASH_HOST=logstash
      - LOGSTASH_PORT=5000
    ports:
      - '8080:8080'
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8080/management/health']
      interval: 5s
      timeout: 5s
      retries: 40
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - task-network

  # Base de datos MySQL
  mysql:
    image: mysql:8.0.30
    volumes:
      - mysql-data:/var/lib/mysql
    environment:
      - MYSQL_ALLOW_EMPTY_PASSWORD=yes
      - MYSQL_DATABASE=task
    ports:
      - '3306:3306'
    command: mysqld --lower_case_table_names=1 --skip-ssl --character_set_server=utf8mb4 --explicit_defaults_for_timestamp
    healthcheck:
      test: ['CMD', 'mysqladmin', 'ping', '-h', 'localhost']
      interval: 5s
      timeout: 5s
      retries: 40
    networks:
      - task-network

  # Elasticsearch para ELK stack
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.10
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    environment:
      - ES_JAVA_OPTS=-Xms256m -Xmx512m
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - '9200:9200'
      - '9300:9300'
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9200/_cluster/health']
      interval: 20s
      timeout: 10s
      retries: 10
    networks:
      - task-network

  # Logstash para ELK stack
  logstash:
    image: docker.elastic.co/logstash/logstash:7.17.10
    volumes:
      - ./src/main/docker/logstash/config/:/usr/share/logstash/config/
      - ./src/main/docker/logstash/pipeline/:/usr/share/logstash/pipeline/
    environment:
      - LS_JAVA_OPTS=-Xmx256m -Xms256m
      - ELASTICSEARCH_HOST=elasticsearch
      - ELASTICSEARCH_PORT=9200
    ports:
      - '5000:5000/tcp'
      - '5000:5000/udp'
      - '9600:9600'
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - task-network

  # Kibana para ELK stack
  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.10
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - '5601:5601'
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - task-network

networks:
  task-network:
    driver: bridge

volumes:
  mysql-data:
  elasticsearch-data:
